import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/**
 * @author debanjandhar
 * 
 *         Question :
 *         https://www.hackerrank.com/challenges/the-quickest-way-up/problem
 * 
 */
public class SnakesAndLadders {

	// Complete the quickestWayUp function below.
	private static int quickestWayUp(int[][] ladders, int[][] snakes) {
		Queue<Cell> cellQueue = new LinkedList<Cell>();

		cellQueue.add(new Cell(1));

		return quickestWayUp(ladders, snakes, cellQueue);
	}

	private static int quickestWayUp(int[][] ladders, int[][] snakes, Queue<Cell> queue) {
		// No path possible if queue is empty. 
		if (queue.peek() == null) {
			return -1;
		}

		Cell currentCell = queue.remove();

		// We will start with maximum dice roll and keep reducing by 1, if the next cell
		// is not valid.
		int diceRoll = 6;
		int nextCellId = currentCell.getCellId() + diceRoll;
		
		// Check if we have reached destination i.e 100
		if (currentCell.getCellId() == 100) {
			// Since we are at destination, so we don't have to roll a dice here. 
			return currentCell.getLength();
		}else if ((100 - currentCell.getCellId()) <= 6) {
			// Increasing counter for current roll. 
			return currentCell.getLength()+1;
		}
		
		// Check if we have any cell with ladder before we role 6
		int[] nextLadderCellIds = getNextLadderCells(currentCell.getCellId(), currentCell.getCellId()+diceRoll, ladders); 
		
		if (nextLadderCellIds.length != 0) {
			// Add ladder cell to queue
			int numLadders = nextLadderCellIds.length;
			for(int i=0;i<numLadders; i++) {
				
			}
			
			queue.add(new Cell(nextLadderCellId, currentCell.getLength()+1));
		}

		while (diceRoll != 0) {
			if (nextLadderCellId != nextCellId && isValidCell(nextCellId, snakes)) {
				queue.add(new Cell(nextCellId, currentCell.getLength()+1));
				break;
			}
			diceRoll--;
		}

		return quickestWayUp(ladders, snakes, queue);
	}

	// Checks if next cell is does not contain a snake
	private static boolean isValidCell(int cellId, int[][] snakes) {
		int numSnakes = snakes.length;
		for (int i = 0; i < numSnakes; i++) {
			// Check if this cell is start point of a snake.
			if (cellId == snakes[i][0]) {
				return false;
			}
		}
		return true;
	}

	// This function returns destination cell id if ladder is present in between first and second cell, else returns
	// -1. If multiple ladders are present then returns the ladder with maximum length.  
	private static int[] getNextLadderCells(int firstCellId, int secondCellId, int[][] laddersOrSnakes) {
		int numElements = laddersOrSnakes.length;
		int[] output = new int[secondCellId-firstCellId];
		int outputIndex = 0;
		for(int i=0; i<numElements;i++) {
			// Check if a ladder is in between first and second cell 
			if (laddersOrSnakes[i][0] > firstCellId && laddersOrSnakes[i][0] < secondCellId) {
				output[outputIndex++] = laddersOrSnakes[i][1];
			}
		}
		
		return output;
	}

	private static final Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) throws IOException {
//		BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
//
//		int t = scanner.nextInt();
//		scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//		for (int tItr = 0; tItr < t; tItr++) {
//			int n = scanner.nextInt();
//			scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//			int[][] ladders = new int[n][2];
//
//			for (int i = 0; i < n; i++) {
//				String[] laddersRowItems = scanner.nextLine().split(" ");
//				scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//				for (int j = 0; j < 2; j++) {
//					int laddersItem = Integer.parseInt(laddersRowItems[j]);
//					ladders[i][j] = laddersItem;
//				}
//			}
//
//			int m = scanner.nextInt();
//			scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//			int[][] snakes = new int[m][2];
//
//			for (int i = 0; i < m; i++) {
//				String[] snakesRowItems = scanner.nextLine().split(" ");
//				scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
//
//				for (int j = 0; j < 2; j++) {
//					int snakesItem = Integer.parseInt(snakesRowItems[j]);
//					snakes[i][j] = snakesItem;
//				}
//			}

//			int[][] ladders = {{32, 62},{42, 68},{12, 98}};
//			int[][] snakes = {{95, 13},{97, 25},{93, 37},{79, 27},{75, 19},{49, 47},{67, 17}};

//			int[][] ladders = {{8, 52},{6, 80},{26, 42},{2,72}};
//			int[][] snakes = {{51, 19},{39, 11},{37, 29},{81,3},{59,5},{79, 23},{53, 7},{43, 33},{77, 21}};

			int[][] ladders = {{3, 54},{37, 100}};
			int[][] snakes = {{56,33}};
		
			int result = quickestWayUp(ladders, snakes);
			System.out.println(result);

//			bufferedWriter.write(String.valueOf(result));
//			bufferedWriter.newLine();
//		}

//		bufferedWriter.close();
//
//		scanner.close();
	}
}

class Cell {
	int cellId;
	int length;

	public Cell(int cellId, int length) {
		this.cellId = cellId;
		this.length = length;
	}

	public Cell(int cellId) {
		this.cellId = cellId;
		this.length = 0;
	}

	public int getCellId() {
		return cellId;
	}

	public void setCellId(int cellId) {
		this.cellId = cellId;
	}

	public int getLength() {
		return length;
	}

	public void setLength(int length) {
		this.length = length;
	}

}
