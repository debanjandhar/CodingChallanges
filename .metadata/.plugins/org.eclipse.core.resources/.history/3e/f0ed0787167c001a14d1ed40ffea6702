package com.odc.pricemng.exception;

import java.util.Iterator;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

@EnableWebMvc
@ControllerAdvice
public class GlobalExceptionHandler {

	private final HttpStatus DEFAULT_HHTP_STATUS = HttpStatus.BAD_REQUEST;

	@ExceptionHandler({ ConstraintViolationException.class, APIException.class, RuntimeException.class })
	public ResponseEntity<String> handleException(Exception e, WebRequest wr) {
		System.out.println("Handling exception under Global Exception Handler for exception " + e.getMessage());

		if (e instanceof APIException) {
			// We know how to handle this and we're better than what we are doing
			// currently!!
			APIException apie = (APIException) e;
			String errorString = apie.handleException();
			HttpStatus status;
			if (apie.getErrorCode() != null) {
				status = apie.getErrorCode().getHttpStatus();
			} else {
				status = DEFAULT_HHTP_STATUS;
			}

			return getResponseFromException(errorString, status);
		} else if (e instanceof ConstraintViolationException) {
			// One or more validations have gone wrong.

			ConstraintViolationException cve = (ConstraintViolationException) e;
			Iterator<ConstraintViolation<?>> allValidationErrors = cve.getConstraintViolations().iterator();
			StringBuilder sb = new StringBuilder();
			while (allValidationErrors.hasNext()) {
				sb.append(allValidationErrors.next().getMessage());
			}

			return getResponseFromException(sb.toString(), HttpStatus.BAD_REQUEST);
		} else {
			// Ooops!! Don't know how do we handle this.
			return getResponseFromException(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	protected ResponseEntity<String> getResponseFromException(String errorMsg, HttpStatus status) {
		return new ResponseEntity<String>(errorMsg, status);
	}

}
