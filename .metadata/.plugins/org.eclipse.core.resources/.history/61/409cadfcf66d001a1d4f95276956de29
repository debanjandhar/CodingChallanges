import java.io.IOException;

/**
 * @author debanjandhar
 *
 *         Question :
 *         https://www.hackerrank.com/challenges/largest-rectangle/problem
 */
public class LargestRectangle {

	// Complete the largestRectangle function below.
	static long largestRectangle(int[] h) {
		long maxArea = Long.MIN_VALUE;

		// This array will contain
		int[] newH = new int[h.length];
		int numElements = h.length;

		// Here we're comparing each element with previous element. If current element
		// is first element, greater than or equal to previous element then inserting
		// the element in new array. If the element is smaller than the previous element
		// then we'll traverse backward until we find an element equal to or less than
		// the current element, updating each element with the value of current index
		// and calculating the max area in the process.
		for (int i = 0; i < numElements; i++) {
			if (i == 0) {
				newH[i] = h[i];
			} else if (h[i] >= h[i - 1]) {
				newH[i] = h[i];
			} else {
				// current index is smaller than previous index
				newH[i] = h[i];

				// traverse backwards
				int tmp = i - 1;
				long tmpMaxArea = Long.MIN_VALUE;
				// Indexing with 1, distance between current and previous element is 2.
				int tmpDist = 2;
				while (tmp > 0 && h[i] < newH[tmp]) {
					if (newH[i] * tmp > newH[tmp] * (tmp - 1) && ) {
						maxArea = newH[i] * tmpDist;
					}

					newH[tmp] = h[i];

					tmpDist++;
					tmp--;
				}

//				if (tmpMaxArea > maxArea) {
//					maxArea = tmpMaxArea;
//				}
			}
		}

		// new array now which has elements with increasing value.

		for (int i = h.length - 2; i >= 0; i--) {
			int dist = h.length - i;
			if (newH[i] * dist > maxArea) {
				maxArea = newH[i] * dist;
			}
		}

		return maxArea;

	}

	public static void main(String[] args) throws IOException {
		int[] h = new int[] { 2, 4, 6, 8, 7, 3, 5, 2 };

		System.out.println(largestRectangle(h));
	}
}
