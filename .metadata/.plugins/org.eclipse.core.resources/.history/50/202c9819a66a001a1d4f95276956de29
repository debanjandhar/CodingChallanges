import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;

public class DownToZeroII {

	/*
	 * Complete the downToZero function below.
	 */
	static int downToZero(int n) {
		Queue<Data> q = new LinkedList<Data>();
		q.add(new Data(n, 0));

		return makeZero(q);
	}

	private static int makeZero(Queue<Data> q) {
		Data currNum = q.remove();

		if (currNum.value == 0) {
			return currNum.distFromSource;
		}

		q.add(new Data(currNum.value - 1, currNum.distFromSource + 1));

//		int divisor = isPrime(currNum.value);
//		if (divisor != currNum.value) {
//			currNum.value = currNum.value / divisor;
//			q.add(new Data(currNum.value, currNum.distFromSource + 1));
//		}

		for (int i = 2; i <= (int) Math.sqrt(currNum.value); i++) {
			if (currNum.value % i == 0) {
				q.add(new Data(currNum.value / i, currNum.distFromSource + 1));
			}
		}

//		System.out.println("Output of queue "+q);

		return makeZero(q);
	}

	private static int isPrime(int n) {
		int minDiv = 0;
		int min = Integer.MAX_VALUE;
		boolean isPrime = true;

		for (int i = 2; i <= n / 2; i++) {
			if (n % i == 0) {
				int diff = (n / i) - i;
				if (diff < 0) {
					break;
				} else if (diff < min) {
					min = diff;
					minDiv = i;
					isPrime = false;
				}
			}
		}

		if (isPrime) {
			return n;
		} else {
			return minDiv;
		}

	}

	public static void main(String[] args) throws IOException {

//		System.out.println(downToZero(966514));
		System.out.println(downToZero(812849));
//		System.out.println(downToZero(808707));
//		System.out.println(downToZero(360422));
//		System.out.println(downToZero(691410));
//		System.out.println(downToZero(691343));
//		System.out.println(downToZero(94));
	}
}

class Data {
	int value;
	int distFromSource;

	public Data(int value, int distFromSource) {
		this.value = value;
		this.distFromSource = distFromSource;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return "[" + value + ", " + distFromSource + "]";
	}
}
