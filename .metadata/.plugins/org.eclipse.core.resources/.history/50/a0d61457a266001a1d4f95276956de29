import java.io.IOException;

public class QueensAttack {

	// Complete the queensAttack function below.
	static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles) {
		int count = 0;

		// Define next cell for each of queen's movement
		int[][] moves = { { 0, -1 }, { -1, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 }, { -1, -1 }, { 1, -1 }, { -1, 1 } };
		int numMoves = 8;
		int numObstacles = obstacles.length;

		for (int i = 0; i < numMoves; i++) {
			int distance = -1;
			int minDistance = Integer.MAX_VALUE;

			for (int j = 0; j < numObstacles; j++) {
				distance = getDistanceToObstacle(r_q, c_q, obstacles[j], moves[i]);

				// if there are multiple obstacles in single path, then consider the closest
				// one.
				if (distance != -1 && distance < minDistance) {
					minDistance = distance;
					break;
				}
			}

			if (distance == -1) {
				// There is no obstacle.
				count += getAllAttackingCells(n, r_q, c_q, moves[i]);
			} else {
				// Ignoring the cell where obstacle is present
				count += minDistance - 1;
			}
		}

		return count;
	}
	
	static void printChessBoard(int n, int k, int r_q, int c_q, int[][] obstacles) {
		String space = " ";
		
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (i == r_q && j == c_q) {
					// This is queen 
					System.out.print("Q" + space);
				}
			}
			System.out.println();
		}
		
	}

	private static int getAllAttackingCells(int boardSize, int x1, int y1, int[] moves) {
		if (moves[0] == 0) {
			return getLength(boardSize, y1, moves[1]);
		} else if (moves[1] == 0) {
			return getLength(boardSize, x1, moves[0]);
		} else {
			// Calculate number of diagonal cells
			int xDiff = getLength(boardSize, x1, moves[0]);
			int yDiff = getLength(boardSize, y1, moves[1]);

			return Math.min(xDiff, yDiff);
		}

	}

	private static int getLength(int boardSize, int axisPoint, int plane) {
		int adjustment = 0;

		// Handling 0th index for negative planes in x and y axis.
		if (plane < 0) {
			adjustment++;
		}

		return (Math.abs((((1 + plane) / 2) * boardSize) - axisPoint) - adjustment);
	}

	// x defines row and y defines column.
	private static int getDistanceToObstacle(int x1, int y1, int[] x2y2, int[] moves) {
		int xDiff = x2y2[0] - x1;
		int yDiff = x2y2[1] - y1;

		boolean isDiagonalObstacle = Math.abs(xDiff) == Math.abs(yDiff);

		// Identify if current piece is an obstacle.
		if (xDiff != 0 && yDiff != 0 && !isDiagonalObstacle) {
			return -1;
		}

		// If 2 cells are diagonally present in a matrix, then difference between
		// any one co-ordinate gives distance between 2 cells.
		if (isDiagonalObstacle) {
			return Math.abs(xDiff);
		}

		if (moves[0] == 0 && xDiff == 0) {
			// Obstacle is in x-axis
			if ((moves[1] < 0 && yDiff < 0) || (moves[1] > 0 && yDiff > 0)) {
				return Math.abs(yDiff);
			}

		} else if (moves[1] == 0 && yDiff == 0) {
			// Obstacle is in y-axis
			if ((moves[0] < 0 && xDiff < 0) || (moves[0] > 0 && xDiff > 0)) {
				return Math.abs(xDiff);
			}
		}

		return -1;

	}

	public static void main(String[] args) throws IOException {

		int result = queensAttack(5, 3, 4, 3, new int[][] { { 5, 5 }, { 4, 2 }, { 2, 3 } });
//		int result = queensAttack(1, 0, 1, 1, new int[][] {});

		System.out.println(result);
	}
}
