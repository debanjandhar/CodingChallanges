import java.io.IOException;

public class QueensAttack {

	// Complete the queensAttack function below.
	static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles) {
		int count = 0;

		// Define next cell for each of queen's movement
		int[][] moves = { { 0, -1 }, { -1, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 }, { -1, -1 }, { 1, -1 }, { -1, 1 } };
		int numMoves = 8;
		int numObstacles = obstacles.length;

		for (int i = 0; i < numMoves; i++) {
			for (int j = 0; j < numObstacles; j++) {
				int distance = getDistanceToObstacle(r_q, c_q, obstacles[j], moves[i]);
				
				if (distance == -1) {
					// This is not an obstacle
				}else {
					
				}
			}
		}

		return count;
	}
	
	// x defines row and y defines column.
	private static int getDistanceToObstacle(int x1, int y1, int[] x2y2, int[] moves) {
		int xDiff = x2y2[0] - x1;
		int yDiff = x2y2[1] - y1;
		
		boolean isDiagonalObstacle = Math.abs(xDiff) != Math.abs(yDiff);
		
		// Considering it's not an obstacle.
		int distance = -1;
		
		// Identify if current piece is an obstacle.
		if (xDiff != 0 && yDiff != 0 && !isDiagonalObstacle) {
			return distance;
		}
		
		if (isDiagonalObstacle) {
			xDiff = xDiff/Math.abs(xDiff);
			yDiff = yDiff/Math.abs(yDiff);
		}
		
		if (moves[0] == 0 && xDiff == 0) {
			// Obstacle is in x-axis
			if (!(moves[1] < 0 && yDiff < 0) || !(moves[1] > 0 && yDiff > 0)) {
				return false;
			}
			
		}else if(moves[1] == 0 && yDiff == 0) {
			// Obstacle is in y-axis
			if (!(moves[0] < 0 && xDiff < 0) || !(moves[0] > 0 && xDiff > 0)) {
				return false;
			}
		}else if(moves[0] != xDiff || moves[1] != yDiff) {
			return false;
		}
		
		
		return distance;
		
	}

	public static void main(String[] args) throws IOException {

		int result = queensAttack(0, 0, 0, 0, new int[][] {});

		System.out.println(result);
	}
}
