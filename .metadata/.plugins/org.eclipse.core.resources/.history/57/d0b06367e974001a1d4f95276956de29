package hackerrank;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class TruckTour {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int numStops = Integer.parseInt(br.readLine());
		int[][] petrolPumpArr = new int[numStops][2];
		Queue<Stop> q = new LinkedList<>();

		for (int i = 0; i < numStops; i++) {
			String[] petrolPump = br.readLine().split(" ");
			petrolPumpArr[i][0] = Integer.parseInt(petrolPump[0]);
			petrolPumpArr[i][1] = Integer.parseInt(petrolPump[1]);
			q.add(new Stop(i, i == 0 ? numStops - 1 : i - 1));
		}

	}

	static int getFirstStartPoint(Queue<Stop> q, int[][] petrolPumps) {
		if (q.isEmpty()) {
			return -1;
		}

		Stop currStop = q.remove();
		int nextStopId = (currStop.destination + 1) % petrolPumps.length;

		if (currStop.id == currStop.destination) {
			return nextStopId;
		}

		if (petrolPumps[currStop.id][0] >= petrolPumps[currStop.id][1]) {
			// Can go to next stop without taking carry
		} else if (petrolPumps[currStop.id][0] + currStop.petrolLft > petrolPumps[currStop.id][1]) {

		}

		Stop nextStop = new Stop(nextStopId, currStop.destination);

		return getFirstStartPoint(q, petrolPumps);

	}
}

class Stop {
	int id;
	int petrolLft;
	int destination;

	public Stop(int id, int destination) {
		this.id = id;
		this.petrolLft = 0;
		this.destination = destination;
	}
}