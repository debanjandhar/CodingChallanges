package com.odc.pricemng.exception;

import java.util.Iterator;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

/**
 * @author debanjandhar
 *
 *         This class is responsible for handling exception across the
 *         application. This class handles mainly 2 types of exception,
 *         {@link APIException} for checked exceptions and
 *         {@link RuntimeException} for unchecked exceptions.
 * 
 *         If it's of type APIexception, then status code and message is
 *         extracted out and response entity is populated with these information
 *         else BadRequest(400) is returned. For response entity message body,
 *         priority is in order handleException message > {@link IErrorCodes}
 *         message > {@link Exception} message .
 * 
 *         In case any validations fail, spring returns
 *         {@link ConstraintViolationException}. All default error messages are
 *         extracted out from this exception to populate the response entity.
 * 
 *         For any other unexpected errors, status InternalServerError(500) is
 *         returned.
 *
 */
@EnableWebMvc
@ControllerAdvice
public class GlobalExceptionHandler {

	private final HttpStatus DEFAULT_HTTP_STATUS = HttpStatus.BAD_REQUEST;

	@ExceptionHandler({ APIException.class, RuntimeException.class })
	public ResponseEntity<String> handleException(Exception e) {

		System.out.println();
		
		if (e instanceof APIException) {
			// We know how to handle this and we're better than what we are doing
			// currently!!
			APIException apie = (APIException) e;
			String errorString = apie.getMessage();
			HttpStatus status;
			if (apie.getErrorCode() != null) {
				status = apie.getErrorCode().getHttpStatus();
				errorString = apie.getErrorCode().getMsg();
			} else {
				status = DEFAULT_HTTP_STATUS;
			}

			if (!isNullOrEmpty(apie.handleException())) {
				errorString = apie.handleException();
			}

			return getResponseFromException(errorString, status);
		} else if (e instanceof ConstraintViolationException) {
			// One or more validations have gone wrong.

			ConstraintViolationException cve = (ConstraintViolationException) e;
			Iterator<ConstraintViolation<?>> allValidationErrors = cve.getConstraintViolations().iterator();
			StringBuilder sb = new StringBuilder();
			while (allValidationErrors.hasNext()) {
				sb.append(allValidationErrors.next().getMessage());
			}

			return getResponseFromException(sb.toString(), HttpStatus.BAD_REQUEST);
		} else {
			// Ooops!! Don't know how do we handle this.
			return getResponseFromException(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	protected ResponseEntity<String> getResponseFromException(String errorMsg, HttpStatus status) {
		return new ResponseEntity<String>(errorMsg, status);
	}

	private boolean isNullOrEmpty(Object input) {
		if (input instanceof String) {
			String inputStr = (String) input;
			return inputStr == null || inputStr.isEmpty();
		} else {
			return input == null;
		}
	}

}
