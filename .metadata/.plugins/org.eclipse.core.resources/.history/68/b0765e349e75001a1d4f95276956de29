package projecteuler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class N4 {
	private int getImmediateSmallestPallindrome(String num) {
		int adjustedNumber = 0;
		int leftPivot = num.length() / 2;
		int rightPivot = leftPivot + 1;
		boolean hasEvenDigits = num.length() % 2 == 0 ? true : false;

		if (hasEvenDigits) {
			rightPivot = leftPivot + 1;
			adjustedNumber = Character.digit(num.charAt(leftPivot), 10) - 1;
		}else {
			adjustedNumber = getPreviousLargestPallindrome();
		}

		return adjustedNumber;
	}

	// Works for numbers less than 100
	private static int getPreviousLargestPallindrome(int num) {
		int tmpNum = Integer.parseInt(num);

		if (tmpNum < 100) {
			int tens = Character.digit(num.charAt(0), 10);
			int ones = Character.digit(num.charAt(1), 10);
			if (tens > ones) {
				int tmp = tens - 1;
				return tmp * 10 + tmp;
			} else if (tens < ones) {
				return tens * 10 + tens;
			} else {
				return tens == 0 ? 9 : Integer.parseInt(num);
			}
		}

		return -1;
	}

	// Works for numbers less than 100
	private static int getNextSmallestPallindrome(String num) {
		int tmpNum = Integer.parseInt(num);

		if (tmpNum < 100) {
			int tens = Character.digit(num.charAt(0), 10);
			int ones = Character.digit(num.charAt(1), 10);
			if (tens > ones) {
				return tens * 10 + tens;
			} else if (tens < ones) {
				int tmp = tens + 1;
				return tmp * 10 + tmp;
			} else {
				return tens == 9 ? 0 : Integer.parseInt(num);
			}
		}

		return -1;
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int numTestCases = Integer.parseInt(br.readLine());
		for (int i = 0; i < numTestCases; i++) {
			String inputNumber = br.readLine();
		}
	}
}
